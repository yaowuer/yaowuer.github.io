#+TITLE: Java Web


* 预习

- 下载 Tomcat 服务器，完成安装
- 了解 Tomcat 的目录结构，并学会基本配置
- 将 Tomcat 配置到 eclipse/idea 中
- 了解 Servlet/jsp 的基本概念

* CS vs BS

Client-Server，客户端-服务端:
- 需要安装独立的应用程序
- 开发语言丰富多彩，比如 WinForm/WPF/QT/JavaFx
  + 优点，灵活、强大、可定制性强
  + 缺点，对于开发者来说，开发起来麻烦，开发需要掌握的基本知识太多。
    对于用户来说，必须要下载并安装单独的应用
- 需要网络进行交互 (tcp/ip协议，socket 编程)

Browser-Server，浏览器-服务器:
- 借助浏览器进行更多底层任务的执行
- 为了渲染页面，推出了一套规则，叫 html
- 后来 html 虽然能渲染数据，但不够好看，所以就诞生了 css
- 后来虽然有了 css 的加持，页面好看了，但是页面不会动，也让人觉得不够爽
- 所以，就产生了 JavaScript，官方的称呼为 ECMAScript，简称 ES

Web 的时代就这样来临了。

大前端统一江湖的梦想就诞生了。

* Servlet
** Servlet 规范

Servlet规范 [[https://github.com/waylau/servlet-3.1-specification][中文版]] [[https://jcp.org/en/jsr/detail?id=340][英文版]]

Servlet 规范是 JCP 组织推出的一套，如何使用 Java 进行 Web 编程的规范。
它本身只包含一份概念的 pdf，还有一个包含着基本接口的 Jar 包。

Servlet 规范是对所有人开放的，只要你原因，你就可以按照规范上的规定，自行去设计相关的基于 Java 的 Web 服务器。

其中，比较流行的是:
- Apache Tomcat
- Jetty
- Weblogic
- Websphare
- JBoss

他们是基于 Java 进行 Web 编程的服务器，也可以看做是 Servlet 容器。

** 包的目录

这是常见开源项目的标准目录结构:

[[file:img/scrot_2019-06-26_02-57-48.png]]

** first-servlet and web.xml

WorldServlet.java:


#+DOWNLOADED: c:/Users/ADMINI~1/AppData/Local/Temp/scrot.png @ 2019-07-04 01:01:12
[[file:img/scrot_2019-07-04_01-01-12.png]]

web.xml:

#+DOWNLOADED: c:/Users/ADMINI~1/AppData/Local/Temp/scrot.png @ 2019-07-04 01:01:50
[[file:img/scrot_2019-07-04_01-01-50.png]]

** Servlet 的请求流程

请求的地址是:
- http://localhost:8888/w1/zzz.html

Tomcat 拿到地址后，除去 schema://host:port/contextPath:
- /zzz.html

接下来，到 web.xml 中，去匹配这个 url，得到相应的要处理的 Servlet 类:
#+BEGIN_SRC xml
  <servlet-mapping>
    <servlet-name>worldServlet</servlet-name>
    <url-pattern>/zzz.html</url-pattern>
  </servlet-mapping>
#+END_SRC

调用 servlet 里的 service 方法，得到返回的字符串，响应给客户端。

最后，客户端，将获取到的响应字符串，渲染到浏览器里面。

TODO: 自己搜索、整理一下，url-pattern 的匹配机制。

* JSP
* Cookie/Session
* El 表达式
* JSTL 标签


