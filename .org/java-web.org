#+TITLE: Java Web


* 预习

- 下载 Tomcat 服务器，完成安装
- 了解 Tomcat 的目录结构，并学会基本配置
- 将 Tomcat 配置到 eclipse/idea 中
- 了解 Servlet/jsp 的基本概念

* CS vs BS

Client-Server，客户端-服务端:
- 需要安装独立的应用程序
- 开发语言丰富多彩，比如 WinForm/WPF/QT/JavaFx
  + 优点，灵活、强大、可定制性强
  + 缺点，对于开发者来说，开发起来麻烦，开发需要掌握的基本知识太多。
    对于用户来说，必须要下载并安装单独的应用
- 需要网络进行交互 (tcp/ip协议，socket 编程)

Browser-Server，浏览器-服务器:
- 借助浏览器进行更多底层任务的执行
- 为了渲染页面，推出了一套规则，叫 html
- 后来 html 虽然能渲染数据，但不够好看，所以就诞生了 css
- 后来虽然有了 css 的加持，页面好看了，但是页面不会动，也让人觉得不够爽
- 所以，就产生了 JavaScript，官方的称呼为 ECMAScript，简称 ES

Web 的时代就这样来临了。

大前端统一江湖的梦想就诞生了。

* Servlet
** Servlet 规范

Servlet规范 [[https://github.com/waylau/servlet-3.1-specification][中文版]] [[https://jcp.org/en/jsr/detail?id=340][英文版]]

Servlet 规范是 JCP 组织推出的一套，如何使用 Java 进行 Web 编程的规范。
它本身只包含一份概念的 pdf，还有一个包含着基本接口的 Jar 包。

Servlet 规范是对所有人开放的，只要你原因，你就可以按照规范上的规定，自行去设计相关的基于 Java 的 Web 服务器。

其中，比较流行的是:
- Apache Tomcat
- Jetty
- Weblogic
- Websphare
- JBoss

他们是基于 Java 进行 Web 编程的服务器，也可以看做是 Servlet 容器。

** 包的目录

这是常见开源项目的标准目录结构:

[[file:img/scrot_2019-06-26_02-57-48.png]]

** first-servlet and web.xml

WorldServlet.java:
#+BEGIN_SRC java
  package com.nf152.web01.web;

  import javax.servlet.ServletException;
  import javax.servlet.http.HttpServlet;
  import javax.servlet.http.HttpServletRequest;
  import javax.servlet.http.HttpServletResponse;
  import java.io.*;

  public class WorldServlet extends HttpServlet {
      @Override
      protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
          resp.setCharacterEncoding("UTF-8");
          resp.setContentType("text/html;charset=utf8");

          PrintWriter writer = resp.getWriter();
          writer.println("<html>");
          writer.println("<h1>");
          writer.println("hello, world!");
          writer.println("</h1>");

          BufferedReader reader = new BufferedReader(new FileReader("e:/aaa.txt"));

          writer.println("<pre>");
          writer.println(reader.readLine());
          writer.println(reader.readLine());
          writer.println(reader.readLine());
          writer.println("</pre>");

          reader.close();

          writer.println("<script>alert(666);</script>");
          writer.println("</html>");
      }
  }
#+END_SRC

web.xml:
#+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
           version="4.0">

      <!-- 注册、声明我们的 servlet -->
      <!-- servlet-name 是为 Servlet 类起的一个别名，可以随便起，但最好具有一定意义，即 aaa/bbb 等不是很好的名字 -->
      <servlet>
          <servlet-name>helloServlet</servlet-name>
          <servlet-class>com.nf152.web01.web.HelloServlet</servlet-class>
      </servlet>
      <servlet>
          <servlet-name>worldServlet</servlet-name>
          <servlet-class>com.nf152.web01.web.WorldServlet</servlet-class>
      </servlet>

      <!-- 为我们注册的 servlet 指定访问的 url-->
      <!-- 一个 servlet 可以映射多个访问的 url -->
      <!-- 这里的 servlet-name 一定要跟上面定义的对应上！ -->
      <servlet-mapping>
          <servlet-name>helloServlet</servlet-name>
          <url-pattern>/xxx</url-pattern>
      </servlet-mapping>
      <servlet-mapping>
          <servlet-name>helloServlet</servlet-name>
          <url-pattern>/yyy</url-pattern>
      </servlet-mapping>
      <!-- 可以给映射的 url 添加某些“后缀”，从而起到一定的迷惑作用 -->
      <servlet-mapping>
          <servlet-name>worldServlet</servlet-name>
          <url-pattern>/zzz.html</url-pattern>
      </servlet-mapping>
  </web-app>
#+END_SRC

* JSP
* Cookie/Session
* El 表达式
* JSTL 标签

