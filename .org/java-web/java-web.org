#+TITLE: Java Web


* 预习

- 下载 Tomcat 服务器，完成安装
- 了解 Tomcat 的目录结构，并学会基本配置
- 将 Tomcat 配置到 eclipse/idea 中
- 了解 Servlet/jsp 的基本概念

* CS vs BS

Client-Server，客户端-服务端:
- 需要安装独立的应用程序
- 开发语言丰富多彩，比如 WinForm/WPF/QT/JavaFx
  + 优点，灵活、强大、可定制性强
  + 缺点，对于开发者来说，开发起来麻烦，开发需要掌握的基本知识太多。
    对于用户来说，必须要下载并安装单独的应用
- 需要网络进行交互 (tcp/ip协议，socket 编程)

Browser-Server，浏览器-服务器:
- 借助浏览器进行更多底层任务的执行
- 为了渲染页面，推出了一套规则，叫 html
- 后来 html 虽然能渲染数据，但不够好看，所以就诞生了 css
- 后来虽然有了 css 的加持，页面好看了，但是页面不会动，也让人觉得不够爽
- 所以，就产生了 JavaScript，官方的称呼为 ECMAScript，简称 ES

Web 的时代就这样来临了。

大前端统一江湖的梦想就诞生了。

* Servlet
** 规范

Servlet3.1 规范 [[https://github.com/waylau/servlet-3.1-specification][中文版]] [[https://jcp.org/en/jsr/detail?id=340][英文版]]

Servlet 规范是 JCP 组织推出的一套，如何使用 Java 进行 Web 编程的规范。
它本身只包含一份概念的 pdf，还有一个包含着基本接口的 Jar 包。

Servlet 规范是对所有人开放的，只要你原因，你就可以按照规范上的规定，自行去设计相关的基于 Java 的 Web 服务器。

其中，比较流行的是:
- Apache Tomcat
- Jetty
- Weblogic
- Websphare
- JBoss

他们是基于 Java 进行 Web 编程的服务器，也可以看做是 Servlet 容器。

** Tomcat 容器

这是 Tomcat 的目录结构，也是常见开源项目的标准目录结构:

[[file:img/scrot_2019-06-26_02-57-48.png]]

** hello-world

WorldServlet.java:

#+DOWNLOADED: c:/Users/ADMINI~1/AppData/Local/Temp/scrot.png @ 2019-07-04 01:01:12
[[file:img/scrot_2019-07-04_01-01-12.png]]

web.xml:

#+DOWNLOADED: c:/Users/ADMINI~1/AppData/Local/Temp/scrot.png @ 2019-07-04 01:01:50
[[file:img/scrot_2019-07-04_01-01-50.png]]

** Servlet
*** 请求流程

请求的地址是:
- http://localhost:8888/w1/zzz.html

Tomcat 拿到地址后，除去 schema://host:port/contextPath，得到:
- ~/zzz.html~

接下来，到 web.xml 中，去匹配这个 url，得到相应的要处理的 Servlet 类:
#+BEGIN_SRC xml
  <servlet-mapping>
    <servlet-name>worldServlet</servlet-name>
    <url-pattern>/zzz.html</url-pattern>
  </servlet-mapping>
#+END_SRC

调用 servlet 里的 service 方法，得到返回的字符串，响应给客户端。

最后，客户端，将获取到的响应字符串，渲染到浏览器里面。

TODO: 自己搜索、整理一下，url-pattern 的匹配机制。

*** Servlet/HttpServlet

如果要使用 Java 提供一个 Web 服务，只需要:
- 写一个类，这个类实现 ~Servlet~ 接口即可。在 Servlet 接口的 service 方法内，处理请求，并返回结果到客户端
- 上述实现的类就是一个 Servlet，然后只需要将其编译并部署到 Servlet 容器里即可。部署的意思是放到 Servlet 容器的指定位置，并配置合适的访问的 url
- 常见的 Servlet 容器是 Tomcat，它不仅具备解析 Servlet 类的功能，还能提供基本的 Web 服务器功能

由上可见，如果提供服务，只需要实现接口。可实际上，我们大多数 Web 服务都是基于 Http 请求的。
HTTP 协议有自己的一些独特规则，比如 http method 等，所以为了能更方便处理基于 HTTP 协议的服务，标准中又提供了一个针对性的 HttpServlet 类。
一般来说，我们创建 Servlet，只需要继承这个类即可。

#+BEGIN_SRC java
  public class MyServlet extends HttpServlet {...}
#+END_SRC

之后，就 *不需要理会 service 方法* 了，而是将相应的逻辑写到对应 http method 的 doGet/doPost/doDelete 等方法中即可。

#+BEGIN_SRC java
  public class MyServlet extends HttpServlet {
      @Override
      doGet(req, resp) {
      }

      @Override
      doPost(req, resp) {
      }
  }
#+END_SRC

即:
: 请求 -> 对应 Servlet -> 对应 doGet/doPost 方法 -> 响应

*** 配置方式

xml 方式。

注解方式。

*** forward/redirect，转发 vs 重定向

转发的语法:
#+BEGIN_SRC java
  request.getRequestDispatcher("/xxx").forward(request, response);
#+END_SRC

重定向的语法:
#+BEGIN_SRC java
  response.sendRedirect("/s/xxx");
#+END_SRC

- *转发* (forward)是服务器端的内部行为，是指当前的 servlet 将接下来的任务交给了(即转发给了)另外一个 servlet/jsp 去继续处理
- 客户端是不会察觉到转发的行为的，因为它的进行仅存在于服务端
- *重定向* (redirect)是服务器借助 HTTP 请求中的 302 返回码，将接下来要处理任务的 url 通知客户端，并让客户端请求新的 url 从而完成剩下的任务
- 一个请求中，如果有重定向，那么客户端实质上是发送了多个请求。如果追踪 http 的通讯，会发现 30x 的返回
- 转发，会存在刷新重复的问题；重定向不会，因为它只是重新进行最后一个请求，这个请求一般不会带一些 *写* 相关的逻辑

** Filter <过滤器>

将多个可以重用的逻辑，抽离出来，以达到 *复用* 目的。

可以配置使对个请求，在到达、离开对应 Servlet 的 doXxx 方法时，
都会经过这个逻辑。

应用场景:
- 编码设置
- 登录控制、权限控制
- 日志记录

使用步骤:
1. 定义过滤器
2. 配置使用
   + web.xml 方式
   + 注解 @WebFilter("/*")

注意:
- 可以配置多个过滤器
- 多个过滤器形成 *链式* 结构，依次调用 doChain
- 调用的顺序，跟配置的顺序有关

** EventListener <监听器>

在某些事件发生的时候，执行的逻辑:
- 应用启动的时候 ContextListener
- request 对象创建、销毁的时候
- session 对象创建、销毁的时候
- session 激活、失效的时候
- session 设置、删除、更新值的时候

使用步骤:
1. 创建，实现 EventListener 接口
2. 在 web.xml 中注册，也可以使用 @WebListener 注解进行注册

** 生命周期 (Lifecycle)

Servlet:
1. 延迟加载（按需加载）
2. 单例模式（效率高，线程不安全）

基本函数:
- init，是在 Servlet 初始化实例的时候执行的
- service
- destroy，实在服务器关闭的时候执行的，一般用来做一些清理工作

Listener/Filter 亦复如是。

* JSP
** 认识 JSP

为什么要有 JSP:
1. 如果进行 Web 通信，一般要返回的内容都是符合 html 格式的文本字符串
2. Servlet 功能非常强大，但是要将结果渲染成 html 字符串，务必要进行麻烦的字符串拼接等，开发效率低
3. 我们需要一种 *模板*，能更好将数据渲染成客户端需要的样子，即产生 html 字符串

** 内置对象

~request/response/application/config/session/out/pageContext~

** JSP 指令

- ~<%@ include file="xxx.jsp" %>~
- ~<%@ taglib prefix="c" uri="xxx.tld" %>~
- ~<%@ page import/errorPage/language/pageEncoding/contentType/... %>~

** JSP 动作元素

~<jsp:include/forward/useBean/setProperty/getProperty...>~

** EL 表达式 (Expression Language)

JSP 的主要任务是: 拿到现成的数据，然后渲染。

使用 ~<% xxxx %>~ 去取的话，有些啰嗦，所以需要简化。

JSP 2.0 之后，就开始支持在 JSP 页面中 *嵌入* 类似 ~${xxx}~ 代码，这被称作 EL 表达式。

#+BEGIN_SRC html
  <!-- 从不同范围内取值 -->
  ${pageScope.xxx} | ${pageScope["xxx"]
  ${requestScope.xxx} <!-- request.getAttribute("xxx") -->
  ${sessionScope.yyy} <!-- session.getAttribute("yyy") -->
  ${applicationScope.zzz} <!-- application.getAttribute("zzz") -->

  <!-- 下面例子，两个点是不一样的: -->
  <!-- > 第一个表示 getAttribute:  Book book = (Book) request.getAttrubite("book"); -->
  <!-- > 第二个表示调用 get 方法:   book.getName() -->
  ${requestScope.book.name}
  ${requestScope.book.getName()} <!-- 跟上面的等同 -->

  <!-- 可以继续简化，将 xxxScope 去掉 -->
  <!-- 会按照 pageScope -> requestScope -> sessionScope -> applicationScope 的顺序去寻找 attribute 数据  -->
  ${age} ${name}
  ${book.name}

  <!-- 其他的隐藏对象 -->
  ${param.data}              <!-- request.getParameter("data") -->
  ${header["user-agent"]     <!-- request.getHeader("user-agent") -->
  ${cookie.JSESSIONID.value} <!-- for (Cookie cookie : req.getCookies()) { -->
                             <!--     if (cookie.getName().equals("JSESSIONID")) { -->
                             <!--         return cookie.getValue(); -->
                             <!--     } -->
                             <!-- } -->

  <!-- 获取 request 对象，并调用 request 的其他方法: -->
  ${pageContext.request.contextPath}
  ${pageContext.request.getContextPath()}

  <!-- EL 表达式可以允许简单的计算 -->
  ${(age + 1) * 2}
  ${empty age}                       <!-- 判断是否为空 -->
  ${age > 18 ? "你的年龄太大!" : age} <!-- if/else 表达式 -->
#+END_SRC

** JSTL 标准标签库

jar 包:
: javax.servlet:jstl:1.2

功能:
- 核心标签
- 格式化标签
- SQL/XML 标签
- JSTL 函数

使用例子:
#+BEGIN_SRC html
  <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

  <c:forEach items="${books}" var="x" varStatus="s" begin="0" end="4" step="1">
      <c:if test="${x.amount > 20}">
          <tr style="background: ${s.count % 2 == 0 ? "pink" : "yellow"}">
              <td>${s.index + 1} / ${s.count}</td>
              <td>${x.id}</td>
              <td>${x.name}</td>
              <td style="color: ${x.price > 100 ? "green" : "purple"}">${x.price}</td>
              <td>${x.amount}</td>
          </tr>
      </c:if>
  </c:forEach>
#+END_SRC

更全面的例子:
#+BEGIN_SRC html
  <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
  <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
  <%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

  <div>
    <table class="tb">
      <c:set var="ccc" scope="page" property="ccc" value="0"/>
      <c:forEach items="${books}" var="x" varStatus="s" begin="0" end="4" step="1">
        <c:if test="${x.amount > 20}">
          <c:set value="${ccc + 1}" var="ccc"/>
          <tr style="background: ${s.count % 2 == 0 ? "pink" : "yellow"}">
            <td>${s.index + 1} / ${s.count} / ${ccc}</td>
            <td>${x.id}</td>
            <td>${x.name}</td>
            <td style="color: ${x.price > 100 ? "green" : "purple"}">${x.price}</td>
            <td>${x.amount}</td>
          </tr>
        </c:if>
      </c:forEach>
    </table>
  </div>

  <div>
    <c:out value="${name}" default="3333"/>
    ${empty name ? "3333" : name}
  </div>

  <div>
    <%--    <c:redirect url="http://www.bing.com" />--%>
    <%--    request.setAttribute("xxx", 333) --%>
    <c:set var="xxx" scope="session" property="xxx" value="333"/>
  </div>

  <div>
    <c:forTokens items="aaa,bbb,ccc,ddd,eee" delims="," var="t" varStatus="s">
      <li>${s.count}. ${t}</li>
    </c:forTokens>
  </div>

  <div>
    <c:forEach var="b" items="${books}">
      <c:choose>
        <c:when test="${b.price > 100}">
          <li>${b.name} 的价格大于 100</li>
        </c:when>
        <c:when test="${b.price <= 100 && b.price > 50}">
          <li>${b.name} 并不贵</li>
        </c:when>
        <c:otherwise>
          <li>《${b.name}》太便宜了，便宜没好货</li>
        </c:otherwise>
      </c:choose>
    </c:forEach>
  </div>

  <div>
    <c:url var="womendelink" value="/student/lst">
      <c:param name="id" value="3"/>
      <c:param name="xx" value="hello world"/>
      <c:param name="yy" value="上岛咖啡"/>
    </c:url>

    <%--    <a href="${pageContext.request.contextPath}/student/lst/?id=3&name=skdfjksdjf&xxx=skdfjdks%20skdfjksdf">超链接</a>--%>
    <a href="${womendelink}">使用 url 定义的变量</a>
  </div>

  <div>
    <c:import var="wodeyemian" url="footer.jsp"/>
  </div>

  <div>
    ${wodeyemian}
  </div>

  <c:if test="${fn:contains(name, 'd,')}">xxx</c:if>

  <%--常用的格式化标签--%>

  <div>
    <fmt:formatDate value="${ddd}" pattern="yyyy-MM-dd HH:mm:ss"/>
  </div>

  <div>
    <fmt:formatNumber value="2323232323" pattern="####,####"/>
  </div>

#+END_SRC

** 将其他页面包含到本页面

三种方式:
- <%@include>   JSP 指令，直接了当将 xxx.jsp 拷贝到当前位置，然后再出将新的 jsp 进行编译处理
- <jsp:include> JSP 动作，先去渲染当前 jsp，再去渲染 xxx.jsp，然后将 xxx.jsp 的结果放到当前位置
- <c:import>

#+BEGIN_SRC html
  <%-- <jsp:include page="listCart.jsp" />--%>
  <%-- <%@include file="listCart.jsp"%>--%>
  <c:import url="listCart.jsp" />
#+END_SRC

* Cookie/Session

Web 请求是基于 HTTP 协议的。

HTTP 协议最大的一个特点，就是 *无状态* 的。
- 一个请求是谁发送的，服务端压根不会理会
- 如果同一个人发送多个请求给服务器，服务器是不会认出来的

但是，在实际的业务中，我们却需要服务器能够识别出不同人的请求。

比如说，购物，那么一个人登录、浏览网站之后，所有的操作都应该聚合起来。
你分很多次请求，加入购物车，最后买单。

我们我们就需要一定的手段，能够让整个 web 请求跟踪用户的操作，这就是所谓的 *会话*。

实际的过程中，基于 HTTP 的会话跟踪手段有很多，其中最重要的是:
1. Cookie
2. URL 重写

** Cookie

Cookie，小饼干的意思。基本是被所有浏览器支持的。

Cookie，本身是浏览器保存在 *本地* 的一段数据，这段数据有这些字段:
- Name/Value
- Domain/Expires, 过期时间，如果不设置的话，就是浏览器没关闭的时间。如果这个值设为负数，那么立刻无效

Cookie 保存的数据:
- 保存在客户端
- 明文保存的文本，不安全 (HttpOnly)
- 大约 4k 左右

Cookie 是可以直接使用 JS 进行操控的:
#+BEGIN_SRC js
  console.log(document.cookie);  // 只会显示所有非 HttpOnly 的 cookie
  document.cookie = "aaa=111";   // 设置 cookie
  document.cookie = "bbb=222;max-age=3600";  // 设置 cookie，指定有效期为 1 小时
#+END_SRC

可以使用 Servlet，在响应结果的时候，让浏览器刷新自己的 cookie。它本质就是在 http 的请求头部添加 ~Set-Cookie~ 字段:
#+BEGIN_SRC java
  Cookie cookie1 = new Cookie("xxx", "111");
  cookie1.setHttpOnly(true);
  resp.addCookie(cookie1);

  Cookie cookie2 = new Cookie("yyy", "222");
  cookie2.setHttpOnly(false);
  cookie2.setMaxAge(33333333);
  resp.addCookie(cookie2);
#+END_SRC

** Session

Session 本质上是用户保存在 *服务端* 的数据:
- 基本是没有大小限制的
- 没有类型的限制
- Session 的机制 *一般* 来说，是基于 Cookie 的

除了基于 Cookie，还可以基于 URL-Rewrite 方式。

Session 的基本操作如下:
#+BEGIN_SRC java
  // 获取用户的 session 对象
  // 如果是第一次执行这个，会根据是否有 JSESSIONID 自动创建，否则返回
  Session session = req.getSession();

  // 判断 session 是不是新创建的
  session.isNew();

  // 数据的存取
  session.setAttribute("aaa", "111");
  session.getAttribute("aaa");

  // 数据的移除
  session.removeAttribute("aaa");
  session.invalidate(); // 移除所有
#+END_SRC

设置 Session 的有效期，可以使用 ~session.setMaxInactiveInterval(333)~ 方法，也可以在 web.xml 中配置。
注意 setMaxInactiveInterval 的单位是 *秒*，但 session-timeout 的单位是 *分钟*:
#+BEGIN_SRC xml
  <session-config>
    <session-timeout>10</session-timeout>
  </session-config>
#+END_SRC

* 文件的上传和下载
* 用户的注册和登录
* 完整的增删改查实现


