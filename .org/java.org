#+TITLE: Java 基础


* 基本类型 (primitive Type)

[[file:img/java-types-001.png]]

** byte(1)
** char(2)
** short(2)/int(4)/long(8)
** float(4)/double(8)
** boolean

true/false/&&/||/not

优先级的问题

#+BEGIN_SRC java
  a && b || c && d && e || f

  1 * 2 / 3 + 8 / 2 * 3

  (a && b) || (c && d && e) || f
#+END_SRC

** 其他

#+BEGIN_SRC java
  // 下面哪种写法会报错

  float a1 = 32.5; // 错
  float a2 = 32.5f;
  float a3 = (float)32.5;

  double b1 = 32.5;
  double b2 = (double)32.5;
  double b3 = 32.5f; // 错

  byte c1 = 65;
  char c2 = 65;
  int c3 = 65;
  // 1.对不对 2.如果不对，原因 3. 如果对，结果
  System.out.println(c1 + c2 + c3); // -> 195
  // 思考：什么是隐式转型，它的基本规则是什么？
  System.out.println((int)c1 + (int)c2 + (int)c3); // -> 195
  // + 是在 Java 中存在的唯一的一个重载的运算符 3 + 4 / "3" + "4"
  System.out.println("C1: " + c1 + "  C2: " + c2 + "  C3: " + c3);
  // 优先级的问题
  System.out.println("C1: " + c1 + "  C2: " + c2 + c3);
  System.out.println(c1 + c2 + "  C3: " + c3);
  System.out.println("C1: " + c1 + "  C2: " + (c2 + c3));

  // 对不对？为什么错了？
  short d1 = 23;
  short d2 = d1 + 1;
  // 这种是对的
  short d5 = (short) (d1 + 1);
  // 为什么报错
  short d4 = d1 + (short)1;
  // 这个为什么不会报错？
  short d3 = 23;
  d3 += 1;

  // 浮点数在计算机中的表示
  // 伴随着精度丢失
  // 怎么在 Java 中进行浮点数的精确计算？BigDecimal
  double e1 = 1;
  double e2 = 0.99;
  System.out.println(e1 - e2);
#+END_SRC

* 引用类型 (Reference Type)
** 数组

[[file:img/arr-01.png]]

#+BEGIN_SRC java
  String na = "xxx";
  String nb = "yyy";

  String[] allof152 = new String[] {
      na, nb
  };


  int[] a1 = new int[9];
  a1[0] = 111;
  a1[2] = 222;
  a1[3] = 333;

  int[] a2 = new int[] { 111, 222, 333, 444, 5555 };
  int[] a3 = { 333, 444, 555, 666 };
#+END_SRC

** 字符串
*** String/StringBuffer/StringBuilder

三个有什么不同之处？

分别应用于什么场景？

** 引用计数及垃圾回收

Garbage Collector，GC，垃圾回收器。

#+BEGIN_SRC java
  Apple a = new Apple();
  Apple b = a;

  a = null;
  b = null;

  Pear p = new Pear();

  a.eat();
  p.eat();
#+END_SRC

** 示例

#+BEGIN_SRC java
  String aaaName = "aaa";
  int bbbbScore = 90;
  String aaaWeixin = "110";
  int getStudentScore (String name) {
  }
  int aaaScore = 90;
  String bbbName = "aaa";
  String bbbWeixin = "110";
#+END_SRC

* 类与对象 (Object-Oritened Program)

对数据的组合。

#+BEGIN_QUOTE

我们不仅需要自由，我们还需要适当的规矩。

规矩能让人不适，但是，它能让整个世界运转得更有效率。


这也就是 Java 之所以能长盛不衰的重要原因:
- 强硬的规则，面向对象的规则 (class-object)
- 强制的静态类型

#+END_QUOTE

** 封装
** 继承
** 多态
* 泛型 (Generic)
* 反射 (Reflection)
* 异常 (Exception)
* 集合类

- ArrayList
- Hashset
- HashMap 


* IO 流

Input/Output Stream，输入、输出流。

流，可以比作水管:
1. 有序
2. 开始，结束

五个类，一个接口:
- File
- OutputStream/InputStream, 字节流
- Writer/Reader, 字符流
- Serializable

IO 类的结构图:


[[file:img/scrot_2019-06-25_07-05-19.png]]

** 输入流

#+BEGIN_SRC java
  public void inputDemo () throws IOException {
      String fileName = "d:\\aaa.txt";
      File file = new File(fileName);

      // new FileOutputStream(file);
      FileInputStream fis = new FileInputStream(fileName);

      // int c;
      // while ((c = fis.read()) > 0) {
      //   System.out.print((char)c);
      // }

      byte[] buf = new byte[2000];
      int len;
      while ((len = fis.read(buf)) > 0) {
          System.out.println("新的一杯:");
          System.out.println(new String(buf));
      }

      fis.close();
  }
#+END_SRC

** 输出流

#+BEGIN_SRC java
  public void outputDemo () throws IOException {
      FileOutputStream fos = new FileOutputStream("d:\\bbb.txt");
      OutputStreamWriter writer = new OutputStreamWriter(fos);
      writer.write("hello, output stream");
      writer.close();
  }
#+END_SRC

** 数据拷贝

#+BEGIN_SRC java
  public void copyDemo () throws IOException {
      FileInputStream fis = new FileInputStream("d:\\bbb.txt");
      FileOutputStream fos = new FileOutputStream("d:\\ccc.txt");

      int c;
      while ((c = fis.read()) > 0) {
          fos.write(c);
      }

      fis.close();
      fos.close();
  }

#+END_SRC

** 压缩

#+BEGIN_SRC java
  public void zip (String... files) throws IOException {
      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream("d:\\eee.zip"));

      for (String file : files) {
          ZipEntry zipEntry = new ZipEntry(file);
          zos.putNextEntry(zipEntry);

          FileInputStream fis = new FileInputStream(file);
          int c;
          while ((c = fis.read()) > 0) {
              zos.write(c);
          }
          fis.close();
      }

      zos.close();
  }

#+END_SRC


** 修改默认的 System.out

#+BEGIN_SRC java
  public static void main(String[] args) {
      redirectSysoutToVoice();

      System.out.println("很高兴见到你");
      System.out.println("152班，加油!你们很棒。相信自己。。。");
  }

  public static void redirectSysoutToVoice () {
      PrintStream ps = new PrintStream(System.out){
          @Override
          public void println(String x) {
              ActiveXComponent sap=new ActiveXComponent("Sapi.SpVoice");
              // 音量 0-100
              sap.setProperty("Volume", new Variant(100));
              // 语音朗读速度 -10 到 +10
              sap.setProperty("Rate", new Variant(-2));
              //获取执行对象
              Dispatch spao=sap.getObject();
              Dispatch.call(spao, "Speak", new Variant(x));
              spao.safeRelease();
              sap.safeRelease();
              super.println(x);
          }
      };
      // 重新分配“标准”输出流
      System.setOut(ps);
  }
#+END_SRC

* 多线程
* 示例

封装一下，使用 Java 对数据库的操纵。

#+BEGIN_SRC java
  DBUtil<Person> du = new DBUtil<>();

  Person person = new Person(a, b, c, d);
  du.add(person);

  List<Person> persons = du.find("age < 18");
#+END_SRC
