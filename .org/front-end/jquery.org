#+TITLE: jQuery


- https://jquery.com/
- [[https://www.w3school.com.cn/jquery/jquery_reference.asp][W3school 上的参考手册]]

* 简介

背景:
- DOM 自身 API 太复杂太反人类
- 写浏览器兼容的代码太麻烦

特点:
- 是对原生方法的封装
- 语法简洁
- 链式操作，好用到爆炸

基本操作逻辑
1. 选取元素 ($)
2. 执行操作 (action)

比如:
#+BEGIN_SRC js
  $("div").css("color", "red");
#+END_SRC

* 使用

可以选择下载到本地，再引用到项目中:
- https://cdn.bootcss.com/jquery/3.4.1/jquery.js
- https://cdn.bootcss.com/jquery/3.4.1/jquery-min.js

其中 min 版本代表进行了压缩的版本，它的体积比较小，适合生产环境。
如果有可能会去阅读 jquery 源码，那么应该选择前者。

也可以直接选择某个 CDN(内容分发网络) 服务商提供的超链接，比如:
: <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.js"></script>
: <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery-min.js"></script>

常见的 CDN 服务网站有:
- https://www.bootcdn.cn/
- http://www.staticfile.org/
- http://jscdn.upai.com/

问题:
- 什么是 CDN?
- 选择 CDN 有什么优点？有什么缺点？

* 选择器 (Selector)

[[file:img/scrot_2019-07-30_03-24-29.png]]


[[https://www.w3school.com.cn/jquery/jquery_ref_selectors.asp][jQuery 参考手册 - 选择器]]

** 基本选择

#+BEGIN_SRC js
  // by Id
  $("#cart");

  // by Class
  $(".red");

  // by Element
  $("div");

  // by Attribute
  $("input[id]");         // 所有有 id 属性的 input
  $("input[name='n']");   // 所有 name 属性的值为 n 的 input
  $("input[name!='n']");  // 不等于
  $("input[name$='n']");  // 以 n 结尾

  // 组合
  $("div#cart"); // 所有 id 为 cart 的 div
  $("#contents ul.people li");
  $("#contents > div");
  $("#contents + div");

  // 多个
  $("div.myClass, ul.people");
#+END_SRC

** 过滤-伪类

#+BEGIN_SRC js
  $("input:first");
  $("input:last");
  $("div:gt(2)");

  $("tr:odd");  // 奇数
  $("tr:even"); // 偶数

  $(":empty");  // 空节点
  $(":contains(text)"); // 包含 text 的元素

  $("div:visible");
  $("div:animated");
#+END_SRC

** 过滤-方法

#+BEGIN_SRC js
  $(".x").has("p");
  $(".x").not(".bar");
  $(".x").filter(".current");
  $(".x").first();
  $(".x").last();
  $(".x").eq(5);
#+END_SRC

** Form 表单相关

jQuery 提供了一些快速选取的语法，让你能更轻松对 form 表单进行选取:

#+BEGIN_SRC js
  $("form :checked");
  $(":input");
  $(":checked");
  $(":selected");
  $(":disabled");
#+END_SRC

其他:
- ~:password~
- ~:reset~
- ~:radio~
- ~:text~
- ~:submit~
- ~:checkbox~
- ~:button~
- ~:image~
- ~:file~

** 按图索骥

- 父辈: parent/parents/parentsUntil/closest
- 子辈: children/find
- 兄弟: next/nextAll/prev/prevAll/siblings

#+BEGIN_SRC js
  $("#aaa").parentsUtil(".red");
  $("a").closest("div");

  $("#main").children();
  $("#main").find(".xxx"); // $("#main .xxx");

  var a = $("a");
  a.siblings().css("color", "red");
#+END_SRC

* DOM 操作
** text/html/val/attr/prop

#+BEGIN_SRC js
  $("#aaa input").val($("#aaa input").val() + ".yyy");

  var div = $("#aaa");
  div.html(div.html() + "<a href='#'>xxx</a>");

  $("#aaa").prop("tagName");
  $("#aaa").attr("id");
#+END_SRC

** append/prepend/before/after/appendTo/prependTo/replaceWith

创建新节点:
#+BEGIN_SRC js
  // 创建新节点
  $("<div>3333333</div>");

  // 创建节点并做很多其他事情
  $("<div>3333333</div>")
      .click(function () {
          alert(new Date())
      })
      .css("color", "red")
      .css("border", "1px solid green")
      .css("width", "100px")
      .animate({ "width": "200px"}, 2000)
      .appendTo("body");

  // 创建一个节点
  var element = $("<div>666666</div>")
      .click(function () {
          alert(new Date())
      })
      .css("color", "red")
      .css("border", "1px solid green")
      .css("width", "100px");

  $("input").after(element);

  // 注意，element 在 dom 树中只存在一份
  // 如果想显示多个，需要用到 clone
  $("input").before(element.clone());

  // 在 #aaa 元素的最后一个子元素后添加 element
  $("#aaa").append(element);
  element.appendTo("#aaa");
#+END_SRC

** clone/remove/empty/detach

- clone，复制
- remove，移除
- empty，清空子元素
- detach，分离

** css/addClass/removeClass/toggleClass/hasClass

#+BEGIN_SRC js
  $(el).css("color", "red");
  $(el).css("color", "red").css("background", "white");
  $(el).css({
      "color": "red",
      "background": "white"
  });

  $(el).toggleClass("red");
#+END_SRC

** width/height/position/scroll

滚动到顶部、底部:
#+BEGIN_SRC js
  // 直接滚动

  $("#comments").scrollTop($(this).height());


  // 使用动画的方式:

  $('#scrlBotm').click(function () {
      $('html, body').animate({
          scrollTop: $(document).height()
      }, 1500);
  });

  $('#scrlTop').click(function () {
      $('html, body').animate({
          scrollTop: '0px'
      }, 1500);
  });
#+END_SRC

* 事件 (Events)

API:
- ~$("ul").on('click, function () {})~
- ~$("ul").on('click, "li", function () {})~ 事件委托
- ~$("ul").click(function () {})~ 简化，语法糖
- ~$("ul").off~ 如果不带参数，那么就取消所有事件
- ~one~ 增加一次事件
- ~bind/unbind~

常用事件:
- 鼠标: click/dblclick/mouseenter/mouseover/mouseleave/hover
- 键盘: keydown/keyup/keypress
- 表单: focus/blur/change/select/submit
- DOM: ready/load/unload/resize/scroll

基本示例:
#+BEGIN_SRC js
  $("li").click(function (e) {
    alert($(this).text());  // 函数的参数，表示 event 事件。使用 $(this) 获取当前元素(target)
  });

  $("ul").on("click", ".xxx", function (e) { // 事件委托机制
      alert($(this).text() + "!");
  });

  $("input").on("keypress", function (e) { // 键盘事件
      if (e.keyCode === 13) {
          alert("您输入的是: " + $(this).val());
      }
  });

  $("ul").off(); // 删除元素上所有事件

  // 相当于 window.onload 但执行时机更靠前 dom 节点加载完之后立刻执行的逻辑
  $(document).ready(function () { });
  $.ready(function () { });
  $(function () { });
#+END_SRC

* 动画效果 (Effects)

- animate/delay
- hide/show/toggle
- fadeOut/fadeIn/fadeToggle/fadeTo
- slideUp/slideDown/slideToggle

#+BEGIN_SRC js
  // animate

  $("ul.banner_bg")
      .css("position", "fixed")
      .css("left", "0")
      .css("top", "0");

  $("ul.banner_bg img")
      .css("width", "400px")
      .css("height", "400xp");

  $("ul.banner_bg img")
      .animate({
          "width": "400px",
          "height": "400px"
      }, 2000)
      .closest("ul")
      .animate({
          "left": "800px"
      }, 2000);

  // 其他快捷方式，比如:

  $("xxx").fadeIn();     // 不带参数
  $("xxx").fadeIn(2000); // 时间
  $("xxx").fedeIn(function () { alert(333); }); // 完成之后的动作
  $("xxx").fedeIn(2000, function () { alert(333); }); // 灵活的参数
#+END_SRC

* 异步提交 (Ajax)

- $.ajax/$.ajaxSetup
- $.get/$.post
- $.load/$.getScript/$.getJSON

#+BEGIN_SRC js
  // Using the core $.ajax() method
  $.ajax({

      // The URL for the request
      url: "post.php",

      // The data to send (will be converted to a query string)
      data: {
          id: 123
      },
    
      // Whether this is a POST or GET request
      type: "GET",
    
      // The type of data we expect back
      dataType : "json",
  })
  // Code to run if the request succeeds (is done);
  // The response is passed to the function
      .done(function( json ) {
          $( "<h1>" ).text( json.title ).appendTo( "body" );
          $( "<div class=\"content\">").html( json.html ).appendTo( "body" );
      })
  // Code to run if the request fails; the raw request and
  // status codes are passed to the function
      .fail(function( xhr, status, errorThrown ) {
          alert( "Sorry, there was a problem!" );
          console.log( "Error: " + errorThrown );
          console.log( "Status: " + status );
          console.dir( xhr );
      })
  // Code to run regardless of success or failure;
      .always(function( xhr, status ) {
          alert( "The request is complete!" );
      });
#+END_SRC

Example:
#+BEGIN_SRC js
  $.ajax({
      url: '/xxx', // 代表请求的服务器地址
      method: 'get|post|..', // 使用的请求方法
      headers: {}, // 设置请求头

      contentType: 'application/x-www-form-urlencoded|...', // 请求的 enctype
      data: 'String'|Object|Array, // 传输的数据
      processData: true|false,     // true: 若 data 是字符串不处理，否则调用 $.params(data, tranditional) 将其转换为 UrlSearchParams 格式
      tranditional: false|true,    // 此参数将会传给上述 $.param 函数，决定是否深度序列

      dataType: 'json?xml?text',   // 默认根据 response 头部的信息自动推测
      async: true|false,           // 是否使用异步请求的方式
      xhr: () => { var xhr = $.ajaxSettings.xhr() }, // 创建 xhr 后调用
      xhrFields: { withCredentials: true },          // 跨域
      timeout, cache, accepts, contents, crossDomain, converters, jsonp, mimeType
  }).done((data) => {
      console.log(data.xxx);
  }).fail((xhr, status, err) => {
      console.error(err);
  }).always((data|xhr, status) => {
      console.log("终于结束了!");
  });
#+END_SRC

** Form 表单获取数据

serialize/serializeArray/params:

#+BEGIN_SRC js
  $( "#myForm" ).serialize();
  // field_1=something&field2=somethingElse

  $( "#myForm" ).serializeArray();
  // [
  //   {
  //     name : "field_1",
  //     value : "something"
  //   },
  //   {
  //     name : "field_2",
  //     value : "somethingElse"
  //   }
  // ]
#+END_SRC

** 表单验证

#+BEGIN_SRC js
  $( "#form" ).submit(function( event ) {
      var inputtedPhoneNumber = $( "#phone" ).val();

      // Match only numbers
      var phoneNumberRegex = /^\d*$/;

      // If the phone number doesn't match the regex
      if ( !phoneNumberRegex.test( inputtedPhoneNumber ) ) {

          // Usually show some kind of error message here

          // Prevent the form from submitting
          event.preventDefault();
      } else {
          // Run $.ajax() here
      }
  });
#+END_SRC

* 其他函数

- ~$(el).get/index/size/toArray~
- ~$.trim/each/map/inArray/extend/isXxx~

* 扩展与插件 (Extend/Plugins)

- https://plugins.jquery.com/
- https://learn.jquery.com/plugins/basic-plugin-creation/

API:
- jQuery.fn
- jQuery.extend
- jQuery.fn.extend

#+BEGIN_SRC js
  (function ( $ ) {
      var shade = "#556b2f";

      $.fn.greenify = function() {
          this.css( "color", shade );
          return this;
      };
  }( jQuery ));
#+END_SRC
* 示例. 拉勾网

#+BEGIN_SRC js
  function showPositionsFloatWindow() {
      var mydiv = $("<div><table id='mytable'><tr><th>职位</th><th>工资</th><th>公司</th></tr></table></div>");

      $("body").prepend(mydiv);

      for (var i = 0; i < $(".default_list").length; i++) {
          var xxx = $(".default_list:eq(" + i + ")");

          var a1 = $(".default_list:eq(" + i + ")").attr("data-positionname"); // 职位
          var a2 = $(".default_list:eq(" + i + ")").attr("data-salary");  // 工资
          var a3 = $(".default_list:eq(" + i + ")").attr("data-company"); // 公司
          var td = "<tr><td>" + a1 + "</td><td>" + a2 + "</td><td>" + a3 + "</td></tr>";

          $("#mytable").append(td);
      }

      $("#mytable,th,tr,td").css("border", "1px solid skyblue");
      mydiv.css("width", "500px")
          .css("height", "800px")
          .css("position", "fixed")
          .css("background", "#f0f0f0");
      mydiv.css("z-index", "999");
  }

  function showPositionsFloatWindow2() {
      // 1. 创建节点，放到 body,然后让它浮动起来
      var $div =
          $("<div><i>x</i><ul></ul></div>")
          .css({
              "position": "fixed",
              "left": "0",
              "top": "0",
              "width": "300px",
              "height": "300px",
              "padding": "10px",
              "margin": "10px",
              "overflow-y": "auto",
              "background": "#ffffff"
          })
          .appendTo("body");

      // 2. 从页面中获取相关数据，并且将数据显示到刚才的 节点上
      $(".default_list").each(function (index, item) {
          $("<li>" + $(item).attr("data-positionname") + " / " + $(item).attr("data-salary") + "</li>")
              .css({
                  "border-bottom": "1px solid gray",
                  "padding": "8px 0"
              })
              .appendTo($div.find("ul"))
      });

      // 3. 添加关闭事件
      $div.find("i").click(function () {
          $div.fadeOut(5000, function () {
              $div.remove();
          });
      });
  }

  function showPositionsFloatWindow3() {
      // 1. 创建节点，放到 body，然后让它浮动起来
      var $div = $("<div><i>x</i><ul></ul></div>").appendTo("body");

      // 2. 从页面中获取相关数据，并且将数据显示到刚才的 节点上
      $(".default_list").each(function (index, item) {
          $("<li>" + $(item).attr("data-positionname") + " / " + $(item).attr("data-salary") + "</li>").appendTo($div.find("ul"))
      });

      // 3. 添加关闭事件
      $div.find("i").click(function () { $div.remove(); });
  }
#+END_SRC
* 示例. 任务管理
** 第〇版、页面与样式

#+BEGIN_SRC html
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8"/>
      <title>任务列表</title>
      <style>
       ,* { padding: 0; margin: 0; box-sizing: border-box }

       body {
         background-image: linear-gradient(120deg, red, orange, yellow, green, blue, purple);
         height: 100vh;
         font-family: "宋体";
       }

       .container {
         max-width: 500px;
         margin: 0 auto;
         padding: 5px;
       }

       input {
         border: 0;
         outline: 0;
         background: none;
         border-bottom: 2px solid black;
         width: 100%;
         padding: 5px;
       }

       h3 {
         margin-top: 15px;
         margin-bottom: 5px;
       }

       .task {
         background: rgba(255, 255, 255, 0.6);
         margin: 5px 0;
         padding: 5px;
         border-radius: 5px;
       }

       .task i {
         float: right;
         margin-right: 10px;
         cursor: pointer;
       }

       .done .task {
         background: rgba(0, 0, 0, 0.5);
         color: white;
       }
      </style>
    </head>
    <body>

      <div class="container">
        <input type="text" value=""/>

        <div class="todo">
          <h3>未完成任务</h3>
          <div class="task">aaa <i>删除</i><i>归档</i></div>
          <div class="task">bbb <i>删除</i><i>归档</i></div>
        </div>

        <div class="done">
          <h3>已完成任务</h3>
          <div class="task">ccc <i>删除</i></div>
          <div class="task">ddd <i>删除</i></div>
        </div>
      </div>
    </body>
  </html>
#+END_SRC

** 第一版、使用 JS 实现动态添加

#+BEGIN_SRC html
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8"/>
      <title>任务列表</title>
      <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script>
      <style>
       ,* { padding: 0; margin: 0; box-sizing: border-box }

       body {
         background-image: linear-gradient(120deg, red, orange, yellow, green, blue, purple);
         height: 100vh;
         font-family: "宋体";
       }

       .container {
         max-width: 500px;
         margin: 0 auto;
         padding: 5px;
       }

       input {
         border: 0;
         outline: 0;
         background: none;
         border-bottom: 2px solid black;
         width: 100%;
         padding: 5px;
       }

       h3 {
         margin-top: 15px;
         margin-bottom: 5px;
       }

       .task {
         background: rgba(255, 255, 255, 0.6);
         margin: 5px 0;
         padding: 5px;
         border-radius: 5px;
       }

       .task i {
         float: right;
         margin-right: 10px;
         cursor: pointer;
       }

       .done .task {
         background: rgba(0, 0, 0, 0.5);
         color: white;
       }
      </style>
    </head>
    <body>

      <div class="container">
        <input type="text" value=""/>

        <div class="todo">
          <h3>未完成任务</h3>
        </div>

        <div class="done">
          <h3>已完成任务</h3>
        </div>
      </div>

      <script>
       $("input").on('keyup', function (e) {
         if (e.keyCode === 13 && $(this).val()) {
           var $task =
             $("<div class='task'></div>")
             .text($(this).val())
             .append("<i class='save'>归档</i><i class='del'>删除</i>")

           $task.find(".del").click(function () {
             $(this).parent().remove();
           });

           $task.find(".save").click(function () {
             $el = $(this).parent();
             $el.appendTo(".done");
             $el.find(".save").remove();
           });

           $(".todo").append($task);
           $(this).val("");
         }
       });
      </script>
    </body>
  </html>
#+END_SRC

** 第二版、若干优化: 添加动画、图标等

#+BEGIN_SRC html
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8"/>
      <title>任务列表</title>
      <link href="https://cdn.bootcss.com/font-awesome/5.10.0-12/css/all.min.css" rel="stylesheet">
      <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script>
      <style>
       ,* { padding: 0; margin: 0; box-sizing: border-box }

       body {
         background-image: linear-gradient(120deg, red, orange, yellow, green, blue, purple);
         height: 100vh;
         font-family: "宋体";
       }

       .container {
         max-width: 500px;
         margin: 0 auto;
         padding: 5px;
       }

       input {
         border: 0;
         outline: 0;
         background: none;
         border-bottom: 2px solid black;
         width: 100%;
         padding: 5px;
       }

       h3 {
         margin-top: 15px;
         margin-bottom: 5px;
       }

       .task {
         background: rgba(255, 255, 255, 0.6);
         margin: 5px 0;
         padding: 5px;
         border-radius: 5px;
       }

       .task i {
         float: right;
         margin-right: 10px;
         cursor: pointer;
       }

       .done .task {
         background: rgba(0, 0, 0, 0.5);
         color: white;
       }
      </style>
    </head>
    <body>

      <div class="container">
        <input type="text" value=""/>

        <div class="todo">
          <h3>未完成任务</h3>
        </div>

        <div class="done">
          <h3>已完成任务</h3>
        </div>
      </div>

      <script>
       $("input").on('keyup', function (e) {
         if (e.keyCode === 13 && $(this).val()) {
           var $task =
             $("<div class='task'></div>")
             .text($(this).val())
             .append("<i class='save fa fa-paper-plane'></i>")
             .append("<i class='del fa fa-trash'></i>");

           $task.find(".del").click(function () {
             $el = $(this).parent();
             $el.fadeOut(function () {
               $el.remove();
             });
           });

           $task.find(".save").click(function () {
             $el = $(this).parent();
             $el.fadeOut(function () {
               $el.appendTo(".done");
               $el.fadeIn();
             });
             $el.find(".save").remove();
           });

           $(".todo").append($task);
           $(this).val("");
         }
       });
      </script>
    </body>
  </html>
#+END_SRC

** 第三版、使用 AJAX 完成前后端交互

#+BEGIN_SRC html
  <!doctype html>
  <html lang="en">
  <head>
      <meta charset="UTF-8"/>
      <title>任务列表</title>
      <link href="https://cdn.bootcss.com/font-awesome/5.10.0-12/css/all.min.css" rel="stylesheet">
      <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script>
      <style>
          ,* {
              padding: 0;
              margin: 0;
              box-sizing: border-box
          }

          body {
              color: darkblue;
              background-image: linear-gradient(120deg, white, yellow);
              height: 100vh;
              font-family: "宋体";
          }

          .container {
              max-width: 500px;
              margin: 0 auto;
              padding: 5px;
          }

          input {
              border: 0;
              outline: 0;
              background: none;
              border-bottom: 2px solid black;
              width: 100%;
              padding: 5px;
          }

          h3 {
              margin-top: 15px;
              margin-bottom: 5px;
          }

          .task {
              background: rgba(255, 255, 255, 0.6);
              margin: 5px 0;
              padding: 5px;
              border-radius: 5px;
          }

          .task i {
              float: right;
              margin-right: 10px;
              cursor: pointer;
          }

          .done .task {
              background: rgba(0, 0, 0, 0.5);
              color: white;
          }
      </style>
  </head>
  <body>

  <div class="container">
      <input type="text" value=""/>

      <div class="todo">
          <h3>未完成任务</h3>
      </div>

      <div class="done">
          <h3>已完成任务</h3>
      </div>
  </div>

  <script>

      // 我们的一贯原则是：棒打鸳鸯，能分就分！
      // 分离出不同函数，看上去复杂了，实质上简单了。
      // 刚开始可能不适应，但你要学会习惯！

      $(function () {
          init();
          initEvent();
          initAddEvent();
      });

      function init() {
          // 取到数据
          $.ajax({
              method: "GET",
              url: "/xxx/ajax/task"
              // dataType: "JSON"  // 猜一下，如果加上这一句，会有什么效果
          }).done(function (res) {
              // 我们可以直接使用 JSON.parse(xxx) 或 JSON.stringify(xxx) 来转换 JSON 对象和字符串

              // 我们也可以让 jQuery 直接将一个 JSON dx作为值返回给我们
              // 猜猜，该怎么做呢？

              var jsonObject = JSON.parse(res);
              jsonObject.forEach(function (task) {
                  if (task.status === "1") {
                      newTask(task.content, task.id, true).appendTo(".todo");
                  } else {
                      newTask(task.content, task.id).appendTo(".done");
                  }
              })
          });
      }

      function initEvent() {
          $(".container").on('click', '.del', function () {
              $el = $(this).parent();
              $.ajax({
                  method: "DELETE",
                  url: "/xxx/ajax/task?id=" + $el.attr("data-id")
              }).done(function () {
                  $el.fadeOut(function () {
                      $el.remove();
                  });
              }).fail(function () {
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  alert("删除失败！")
              })
          }).on('click', '.save', function () {
              $el = $(this).parent();
              $.ajax({
                  method: "POST",
                  url: "/xxx/ajax/task",
                  data: {id: $el.attr("data-id")}
              }).done(function () {
                  $el.fadeOut(function () {
                      $el.appendTo(".done");
                      $el.fadeIn();
                  });
                  $el.find(".save").remove();
              }).fail(function () {
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                  alert("归档失败!")
              })
          });
      }

      function initAddEvent() {
          $("input").on('keyup', function (e) {
              if (e.keyCode === 13 && $(this).val()) {
                  $.ajax({
                      method: "PUT",
                      url: "/xxx/ajax/task?" + $.param({
                          content: $(this).val()
                      })  // $.param 方法是干什么的？需要了解
                  }).done(function (res) {
                      var $task = newTask($("input").val(), res, true);
                      $(".todo").append($task);
                      $("input").val("");
                  }).fail(function () {
                      // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                      // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                      // WARNING: 为了用户体验，严禁在页面中使用 alert 进行弹出提示
                      alert("添加失败.")
                  })
              }
          });
      }

      function newTask(content, id, isNew) {
          // 创建新节点
          var $task = $("<div class='task'>" + content + "</div>")
              .attr("data-id", id)
              .append("<i class='del fa fa-trash'></i>");

          if (isNew) {
              $task.append("<i class='save fa fa-paper-plane'></i>");
          }
          return $task;
      }
  </script>
  </body>
  </html>
#+END_SRC
