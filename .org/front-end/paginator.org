#+TITLE: 分页(Pagination)


* Paginator 示例

这是我们的自己定义的分页类:
#+BEGIN_SRC java
  package com.nf.howdoyoudo.pagination;

  import java.util.ArrayList;
  import java.util.List;


  /**
   ,* 封装分页功能
   ,*
   ,* 使用方法：
   ,* 1. 获取用户参数，并使用这些参数创建 {@link Paginator} 对象
   ,* 2. 查询数据库，得到记录总数，保存到 {@link Paginator} 对象
   ,* 3. 查询数据库，得到分页数据，保存到 {@link Paginator} 对象。可以通过 {@link Paginator#getOffset()} 得到数据的开始序号。
   ,* 4. 保存 {@link Paginator} 到 request 或 session 中，用于页面渲染。
   ,* 5. 使用保存的 {@link Paginator} 对象渲染页面，可以使用 {@link Paginator#outputPageNav(String, String, boolean, boolean)} 直接输出页码导航
   ,*
   ,* <code>
   ,*
   ,*     // in the servlet
   ,*     Paginator pager = new Paginator(当前页, 每页显示数目, 导航栏页数);
   ,*
   ,*     pager.setRowCount(dao.count());
   ,*     pager.setData(dao.findAll(page.getOffset(), page.getSize());
   ,*
   ,*     request.addAttribute("pager", pager);
   ,*
   ,*
   ,*     // in the jsp
   ,*     <style>
   ,*         #pagination {}
   ,*     </style>
   ,*     <table>
   ,*         <%-- 数据展示 --%>
   ,*     </table>
   ,*     <nav>
   ,*         <%-- 页码导航栏 --%>
   ,*         ${page.outputPageNav("/url", "pageno", true, true)}
   ,*     </nav>
   ,*
   ,* </code>
   ,* @param <T>
   ,*/
  public class Paginator<T> {

      // 从用户处获取的参数
      private int current = 1;   // 当前页码
      private int pageSize = 10; // 每页数目
      private int linkSize = 5;  // 导航栏页码数目

      // 从数据库查询到的数据
      private int rowCount;      // 表示总共有多少条；
      private List<T> data = new ArrayList<>();  // 获取到的数据

      // 根据上面计算出的数据
      private int pageCount;     // 总共有多少页
      private List<Integer> links = new ArrayList<>();  // 导航条要显示的页码



      /* Constructors */
      public Paginator() {
      }

      public Paginator(int current, int pageSize, int linkSize) {
          this.current = current;
          this.pageSize = pageSize;
          this.linkSize = linkSize;
      }



      /* Accessors */
      public int getCurrent() {
          return current;
      }

      public void setCurrent(int current) {
          this.current = current;
      }

      public int getPageSize() {
          return pageSize;
      }

      public void setPageSize(int pageSize) {
          this.pageSize = pageSize;
      }

      public int getLinkSize() {
          return linkSize;
      }

      public void setLinkSize(int linkSize) {
          this.linkSize = linkSize;
      }

      public int getRowCount() {
          return rowCount;
      }

      public void setRowCount(int rowCount) {
          this.rowCount = rowCount;
          this.pageCount = (rowCount + pageSize - 1) / pageSize;
          calcLinks();
      }

      public List<T> getData() {
          return data;
      }

      public void setData(List<T> data) {
          this.data = data;
      }

      public int getOffset() {
          return (this.current - 1) * this.pageSize + 1;
      }

      public int getPageCount() {
          return pageCount;
      }

      public List<Integer> getLinks() {
          return links;
      }

      /**
       ,* 计算/刷新导航栏要显示的页码
       ,*/
      public void calcLinks() {
          // 根据下面条件计算：
          // 1. 当前页 current
          // 2. 总页数 pageCount
          // 3. 显示数目 linkSize
          int halfLinkSize = this.linkSize/2;
          int startPage = Math.max(this.current - halfLinkSize, 1);
          int endPage = Math.min(this.current + halfLinkSize, this.pageCount);

          if(endPage - startPage < this.linkSize - 1) {
              if(startPage == 1) {
                  endPage = Math.min(startPage + this.linkSize - 1, this.pageCount);
              } else {
                  startPage = Math.max(endPage - this.linkSize + 1, 1);
              }
          }
          for(int i = startPage; i <= endPage; i++) {
              this.links.add(i);
          }
      }

      /**
       ,* 输出导航条的 html
       ,*
       ,* 简单封装，可根据需求自己定制
       ,*
       ,* @param url 请求路径
       ,* @param pagenoParam 表示请求中页码的字段名称
       ,* @param isFirstLast 是否显示首页末页
       ,* @param isPrevNext  是否显示上页下页
       ,* @return 分页的 html 语句
       ,*/
      public String outputPageNav(String url, String pagenoParam, boolean isFirstLast, boolean isPrevNext) {

          String firstLabel = "首页", lastLabel = "末页", prevLabel = "?", nextLabel = "?";

          String normalLink = "  <li><a href='" + url + "?" + pagenoParam + "=%s'>%s</a></li>\n";
          String currentLink = "  <li><a href='#' class='current'>%s</a></li>\n";
          String readonlyLink = "  <li><a href='#' class='ro'>%s</a></li>\n";

          StringBuilder output = new StringBuilder("<ul id='pagination'>\n");

          // 首页
          if(isFirstLast) {
              if(current == 1) {
                  output.append(String.format(readonlyLink, firstLabel));
              } else {
                  output.append(String.format(normalLink, 1, firstLabel));
              }
          }

          // 上一页
          if(isPrevNext) {
              if(current < 2) {
                  output.append(String.format(readonlyLink, prevLabel));
              } else {
                  output.append(String.format(normalLink, current - 1, prevLabel));
              }
          }

          // 第 x 页
          for(Integer i : links) {
              if(current == i) {
                  output.append(String.format(currentLink, i));
              } else {
                  output.append(String.format(normalLink, i, i));
              }
          }

          // 下一页
          if(isPrevNext) {
              if(current >= pageCount) {
                  output.append(String.format(readonlyLink, nextLabel));
              } else {
                  output.append(String.format(normalLink, current + 1, nextLabel));
              }
          }

          // 尾页
          if(isFirstLast) {
              if(current == pageCount) {
                  output.append(String.format(readonlyLink, lastLabel));
              } else {
                  output.append(String.format(normalLink, pageCount, lastLabel));
              }
          }

          return String.valueOf(output.append("</ul>"));
      }

  }
#+END_SRC

* Paginator 类使用方法

*首先，在服务端，创建分页对象，将所有跟分页相关的参数和数据都封装到分页对象里：*

#+BEGIN_SRC java
  // 1. 从用户请求中获取相应的分页参数
  //    最重要的是 pageNumber(第几页), 其次可选的是 pageSize(每页多少条), linkSize(分页导航显示多少页码)
  //    如果用户没有传递来这样的参数，初始化为默认值
  int pageNumber = request.getParameter("pageno") == null ? 1 : Integer.parseInt(request.getParameter("pageno"));
  int pageSize = 9;
  int linkSize = 7;

  // 2. 使用上面获取的参数，创建我们的分页对象
  Paginator<Person> paginator = new Paginator<>(pageNumber, pageSize, linkSize);

  // 3. 从数据库里，查询记录总数。然后将结果保存到分页对象中
  int personCount = personDAO.getPersonCount();
  paginator.setRowCount(personCount);

  // 4. 从数据库里，查询分页数据。然后将结果保存到分页对象中
  int offset = paginator.getOffset();   // 计算数据的序号
  List<Person> persons = personDAO.findPersonsByPage(offset, pageSize);
  paginator.setData(persons);

  // 5. 将分页对象保存起来，用于页码渲染
  req.setAttribute("paginator", paginator);
  req.getRequestDispatcher("pages/pagination.jsp").forward(req, resp);

#+END_SRC


在方法 =PersonDAO#findPersonsByPage()= 里，我们将进行分页查询。
这里给提供了一个示例方法，可以将普通的查询语句包装为分页查询语句。
#+BEGIN_SRC java
  // 将普通的查询语句，转换为一个分页查询语句
  // MSSQL 中的一个简单示例, [用法示例]:
  //    String pagedSQL = pageLimitSQL("select id, name, weixin from person where id > ?", "id", 200, 10);
  //    ps = conn.prepareStatement(pageLimitSQL);
  //    ps.setInteger(1, 33);
  //    ...
  public static String pageLimitSQL(String sql, String orderBy, int offset, int size) {
      String sql_temp = "select * from ( select *, ROW_NUMBER() over (order by %s) _rn from ( %s ) as __o ) as __p where _rn >= %d and _rn < %d";
      return String.format(sql_temp, orderBy, sql, offset, offset + size);
  }

#+END_SRC


*其次，在 JSP 页码中，大致分为三部分：*
1. 头部导航(header: =总共 m 页，当前 n 页=)
2. 分页数据列表(table)
3. 分页导航(nav: =Pre |1 | 2 | 3 | 4 | 5 | Next=)

#+BEGIN_SRC html
  <body>

    <div id="main">
      
      <!-- 第一部分，头部导航 -->
      <header>当前 ${pager.current} 页，总共 ${pager.pageCount} 页 </header>

      <!-- 第二部分，数据展示 -->
      <table>
        <tr>
          <th>ID</th> <th>名字</th> <th>微信</th>
        </tr>
        <c:forEach items="${pager.data}" var="i">
          <tr>
            <td>${i.id}</td> <td>${i.name}</td> <td>${i.weixin}</td>
          </tr>
        </c:forEach>
      </table>

      <!-- 第三部分，页码导航 -->
      <nav style="text-align: center">
        ${pager.outputPageNav("/url", "pageno", true, true);
      </nav>
      
  </body>

#+END_SRC

因为 *页码导航栏* 的 html 基本是一致的，并且里面的计算逻辑有些无聊，所以最好单独封装在分页对象里。导航栏的样式需要通过外部 css 控制。
这里，我们封装到了 =Paginator#outputPageNav()= 方法里，在 jsp 页码里直接使用 el 表达式调用就行了:
: ${pager.outputPageNav("/url", "pageno", true, true)
- 第一个参数代表分页的链接
- 第二个参数代表用户链接中代表分页的字段的名字
- 第三个参数代表是否要生成“首页/末页”
- 第四个参数代表是否要生成“上页/下页”。

* Paginator 的封装

如果数据量大的时候，数据全部取出来并显示在页面上基本是不现实的。
1. 数据库忙死
2. 数据传输慢死
3. 用户的浏览器卡死
4. 用户翻页累死
5. 等等等

所以需要一部分一部分显示，这就需要 *分页* 功能。分页是 web 开发需要掌握的基本技能。

如果要分页，作为服务器，需要掌握用户的下面几个需求，这是基本需求：
1. 要看第几页
2. 每页显示多少条
3. 分页导航栏怎么显示，显示多少页码

所有这些参数需要用户通过请求的方式告知服务器。
: /myrequest?pageNumber=x&pageSize=y&linkSize=z

当然，不可能强制要求用户将这些参数全都传递给服务器。如果没有传递的话，服务器需要自己给这些参数初始值。
比如， =pageNumber= 的初始值为 1。

然后，我们需要使用这些参数查询数据库：
1. 数据的总条数 rowCount: =select count(*) from table=
2. 分页的数据 dataList: =select top 20 * from table=

而且，我们需要获得分页导航栏要显示的页码等，这需要一定的计算过程。

等等。

按照 OO 思想，上面的一切，最好封装起来：既方便使用，又清晰明了。而且封装好了以后直接拿来用，很爽。

比如，我们封装到一个类里，名字叫 =Paginator=:
1. 我们需要将所有跟分页相关的参数放进去
2. 我们需要将查询到的记录总数放进去
3. 我们需要将数据库查询所用的页码计算放进去
4. 我们需要将分页查询得到的数据放进去
5. 我们需要将计算总页数，计算导航栏页码等也放进去

总之，跟分页相关的一切，我们都可以封装到里面。

如果封装好了，剩下就是使用了。

